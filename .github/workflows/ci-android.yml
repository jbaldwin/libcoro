name: ci-android

on:
  pull_request:
  workflow_dispatch:

jobs:
  ci-android:
    name: ci-android-${{ matrix.abi }}${{ matrix.abi == 'x86_64' && '+test' || '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 70
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a, x86, x86_64]
    env:
      TEST_FILTER: "~[benchmark] ~[bench] ~[semaphore] ~[io_scheduler] ~[ring_buffer] ~[thread_pool] ~[tcp_server] ~[tls_server] ~[dns] ~*net::* ~*udp* ~*ip_address* ~*wait_for* ~*wait_until*"
      TEST_TIMEOUT: "600"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK tools
        uses: android-actions/setup-android@v3

      - name: Cache Gradle & native build
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
            test/android/.cxx
            test/android/.gradle
            test/android/build-${{ matrix.abi }}
          key: gradle-${{ runner.os }}-${{ matrix.abi }}-${{ hashFiles('test/android/**/*.gradle*','test/android/gradle.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-${{ matrix.abi }}-
            gradle-${{ runner.os }}-

      - name: Accept Android licenses
        run: |
          yes | sdkmanager --licenses > /dev/null || true

      - name: Install CMake (required for externalNativeBuild)
        run: |
          sdkmanager --install "cmake;3.22.1" > /dev/null

      - name: Build OpenSSL (if missing for ABI)
        working-directory: test/android
        run: |
          ABI="${{ matrix.abi }}"
          ROOT="$PWD"
          OUT_DIR="external/openssl/$ABI/lib"
          if [ -f "$OUT_DIR/libssl.a" ] && [ -f "$OUT_DIR/libcrypto.a" ]; then
            echo "OpenSSL already present for $ABI"; exit 0; fi
          echo "Building OpenSSL for $ABI";
          bash scripts/build_openssl.sh --abis "$ABI" --api 24

      - name: Build debug APK (single ABI)
        working-directory: test/android
        env:
          ANDROID_MATRIX_ABI: ${{ matrix.abi }}
        run: |
          echo "Building for ABI: ${{ matrix.abi }}"
          export GRADLE_USER_HOME="$PWD/.gradle"
          BUILD_DIR="build-${{ matrix.abi }}"
          gradle clean assembleDebug --stacktrace --no-daemon -PciAbi='${{ matrix.abi }}' -PcustomBuildDir=$BUILD_DIR
          ls -la "$BUILD_DIR/outputs/apk/debug" || true
          echo "Verify native lib for ABI present" || true
          find "$BUILD_DIR" -type f -path "*${{ matrix.abi }}*" -name "*.so" | head -n 20 || true

      - name: Upload APK artifact (per ABI)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.abi }}
          path: |
            test/android/build-${{ matrix.abi }}/outputs/apk/debug/*.apk
            test/android/build/outputs/apk/debug/*.apk

      - name: Install emulator runtime dependencies
        if: matrix.abi == 'x86_64'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libpulse0 libnss3 libxcomposite1 libxcursor1 libxdamage1 \
            libxi6 libxrandr2 libxtst6 libasound2 libx11-6 libx11-xcb1 \
            libxcb1 libxss1 libglu1-mesa libdbus-1-3 ca-certificates \
            fonts-liberation libwayland-client0 libwayland-cursor0 || true

      - name: Create AVD
        if: matrix.abi == 'x86_64'
        run: |
          set -euo pipefail
          export ANDROID_AVD_HOME="$HOME/.android/avd"
          export ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-$ANDROID_HOME}"
          export EMU_BIN="$ANDROID_SDK_ROOT/emulator/emulator"
          # Avoid -p: create AVD home only if missing
          [ -d "$ANDROID_AVD_HOME" ] || mkdir "$ANDROID_AVD_HOME"
          sdkmanager --channel=0 --install "emulator" "platform-tools" > /dev/null || true
          sdkmanager --channel=0 --install "system-images;android-30;default;x86_64" > /dev/null
          avdmanager delete avd -n test || true
          echo "no" | avdmanager create avd -n test -k "system-images;android-30;default;x86_64" --force
          "$EMU_BIN" -list-avds || true
          if ! "$EMU_BIN" -list-avds | grep -q '^test$'; then
            echo "AVD 'test' creation failed" >&2; exit 1; fi

      - name: Launch emulator
        if: matrix.abi == 'x86_64'
        run: |
          set -euo pipefail
          export ADB="${ANDROID_SDK_ROOT:-$ANDROID_HOME}/platform-tools/adb"
          export EMU_BIN="${ANDROID_SDK_ROOT:-$ANDROID_HOME}/emulator/emulator"
          export ANDROID_AVD_HOME="$HOME/.android/avd"
          export QT_QPA_PLATFORM=offscreen
          export ANDROID_EMULATOR_USE_SYSTEM_LIBS=1
          "$ADB" kill-server || true
          "$ADB" start-server
          LOG_FILE=emulator_stdout.log
          nohup "$EMU_BIN" -avd test -no-window -no-audio -no-boot-anim -accel off -gpu swiftshader_indirect -no-snapshot -wipe-data -netfast > "$LOG_FILE" 2>&1 &
          EMU_PID=$!
          sleep 2
          kill -0 "$EMU_PID" || { echo "Emulator exited early" >&2; tail -n 100 "$LOG_FILE" || true; exit 1; }
          echo "Waiting for emulator device..."
          for i in $(seq 1 150); do
            DEV=$("$ADB" devices | awk '/emulator-/{print $1; exit}')
            [ -n "$DEV" ] && break
            sleep 2
          done
            [ -n "$DEV" ] || { echo "No emulator device" >&2; tail -n 120 "$LOG_FILE" || true; exit 1; }
          "$ADB" -s "$DEV" wait-for-device
          echo "Waiting boot..."
          for i in $(seq 1 150); do
            BOOTED=$("$ADB" -s "$DEV" shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            BOOTANIM=$("$ADB" -s "$DEV" shell getprop service.bootanim.exit 2>/dev/null | tr -d '\r')
            [ "$BOOTED" = "1" ] && [ "$BOOTANIM" = "1" ] && break
            sleep 2
          done
          "$ADB" -s "$DEV" shell settings put global window_animation_scale 0 || true
          "$ADB" -s "$DEV" shell settings put global transition_animation_scale 0 || true
          "$ADB" -s "$DEV" shell settings put global animator_duration_scale 0 || true
          echo "Waiting for package manager..."; for i in $(seq 1 120); do "$ADB" -s "$DEV" shell pm list packages >/dev/null 2>&1 && break; sleep 2; done

      - name: Install & run tests (x86_64)
        if: matrix.abi == 'x86_64'
        run: |
          set -euo pipefail
          ADB="${ANDROID_SDK_ROOT:-$ANDROID_HOME}/platform-tools/adb"
          DEV=$("$ADB" devices | awk '/emulator-/{print $1; exit}')
          APK=$(ls test/android/build-${{ matrix.abi }}/outputs/apk/debug/*.apk 2>/dev/null | head -n1 || ls test/android/build/outputs/apk/debug/*.apk 2>/dev/null | head -n1 || true)
          [ -n "$DEV" ] || { echo "No device" >&2; exit 1; }
          [ -n "$APK" ] || { echo "APK missing" >&2; exit 1; }
          echo "Install attempts..."
          for i in $(seq 1 5); do
            OUT=$("$ADB" -s "$DEV" install -r "$APK" 2>&1) || true
            echo "$OUT"; echo "$OUT" | grep -q "Success" && break
            sleep 5
          done
          echo "Waiting for package manager (pm) to be responsive..."
          PM_READY=0
          for i in $(seq 1 120); do
            "$ADB" -s "$DEV" shell pm list packages >/dev/null 2>&1 && { PM_READY=1; break; }
            sleep 2
          done
          [ "$PM_READY" -eq 1 ] || { echo "Package manager not ready" >&2; exit 1; }
          echo "Probing storage readiness (/sdcard)..."
          set +e
          STORAGE_READY=0
          for i in $(seq 1 90); do
            "$ADB" -s "$DEV" shell 'echo 42 > /sdcard/ci_probe 2>/dev/null' >/dev/null 2>&1
            "$ADB" -s "$DEV" shell 'cat /sdcard/ci_probe' 2>/dev/null | grep -q '^42$'
            if [ $? -eq 0 ]; then STORAGE_READY=1; break; fi
            sleep 2
          done
          set -e
          if [ "$STORAGE_READY" -ne 1 ]; then
            echo "Storage not fully ready (continuing)" >&2
            "$ADB" -s "$DEV" shell ls -ld /sdcard 2>/dev/null || true
            "$ADB" -s "$DEV" shell df -h /sdcard 2>/dev/null || true
          fi
          PKG=com.example.libcorotest
          echo "Initial launch to create internal storage dir..."
          "$ADB" -s "$DEV" shell am start -n $PKG/.MainActivity >/dev/null 2>&1 || true
          sleep 5
          echo "Prepare test config"
          {
            [ -n "${TEST_FILTER}" ] && printf 'filter=%s\n' "${TEST_FILTER}" || true
            printf 'timeout=%s\n' "${TEST_TIMEOUT}";
          } > coro_test_config.properties
          "$ADB" -s "$DEV" push coro_test_config.properties /data/local/tmp/coro_test_config.properties >/dev/null
          echo "Copy config into app sandbox (best-effort)"
          # Make config copy non-fatal: fallback to defaults if copy fails
          COPY_OK=0
          # First attempt: try copying through run-as with absolute paths
          PKG_DIR="/data/data/$PKG"  
          if "$ADB" -s "$DEV" shell "run-as $PKG test -d . && run-as $PKG test -w ." 2>/dev/null; then
            echo "App sandbox writable, attempting config copy..."
            "$ADB" -s "$DEV" shell run-as $PKG sh -c "test -d files || mkdir files" 2>/dev/null || true
            if "$ADB" -s "$DEV" shell run-as $PKG cp /data/local/tmp/coro_test_config.properties files/coro_test_config.properties 2>/dev/null; then
              COPY_OK=1
              echo "Config copied successfully"
              "$ADB" -s "$DEV" shell run-as $PKG sh -c 'ls -l files/coro_test_config.properties; head -n 3 files/coro_test_config.properties' || true
            fi
          fi
          if [ $COPY_OK -ne 1 ]; then
            echo "Config copy failed or sandbox not writable - using default test settings" >&2
            echo "Tests will run with: filter=\"${TEST_FILTER:-*}\", timeout=${TEST_TIMEOUT}s"
          fi
          echo "Force-stop and relaunch for tests"
          "$ADB" -s "$DEV" shell am force-stop $PKG || true
          "$ADB" -s "$DEV" logcat -c || true
          "$ADB" -s "$DEV" shell am start -n $PKG/.MainActivity
          TIMEOUT=3600
          while [ $TIMEOUT -gt 0 ]; do
            amstack=$("$ADB" -s "$DEV" shell dumpsys activity activities | grep -E "Activities=.*com.example.libcorotest" || true)
            [ -z "$amstack" ] && break
            sleep 2; TIMEOUT=$((TIMEOUT-2))
          done
          "$ADB" -s "$DEV" logcat -v time -d -s coroTest:I > emulator.log || true
          tail -n 200 emulator.log || true

      - name: Assert success (x86_64)
        if: matrix.abi == 'x86_64'
        run: |
          grep -q "Exit code: 0" emulator.log || { echo "Tests did not report success" >&2; exit 1; }
          grep -q "No tests ran" emulator.log && { echo "No tests executed" >&2; exit 1; } || true

      - name: Extract test log
        if: always() && matrix.abi == 'x86_64'
        run: |
          set -e
          ADB="${ANDROID_SDK_ROOT:-$ANDROID_HOME}/platform-tools/adb"
          DEV=$("$ADB" devices | awk '/emulator-/{print $1; exit}')
          if [ -n "$DEV" ]; then
            "$ADB" -s "$DEV" shell run-as com.example.libcorotest cat files/libcoro-tests.log > libcoro-tests.log 2>/dev/null || echo "libcoro-tests.log not found" >&2
          fi
          [ -f libcoro-tests.log ] && tail -n 40 libcoro-tests.log || true

      - name: Upload logs
        if: always() && matrix.abi == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: emulator-logs
          path: |
            emulator.log
            test/android/build-${{ matrix.abi }}/outputs/apk/debug/*.apk
            test/android/build/outputs/apk/debug/*.apk
            libcoro-tests.log
